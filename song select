# this program uses a pre existing dictionary called album to classify the albums and
# songs themselves and to add songs and albumbs to the dictionary 

class Song:
    """Calls to represent a song
    
    Attributes:
        title (str): the title of the song
        artist (Artist): an artist object representing he songs creator.
        duration (int) The duration of the song in seconds. May be zero]
    """

    def __init__(self, title, artist, article, duration=0):

        self.title = title
        self.artist = artist
        self.duration = duration


class Album:
    """class to represent an Album, using it's track list
    Attibutes:
        name (str): The name of the album.
        year (int): The year the album was released
        artist: (Artist): the artist responsible for the album
            if not specified, the artist will default to artist with the name
                "various Artists"
        tracks (List(Song)): A list of the songs on the album

    Methods:
        addSong: Used to add a new song to the album's track list
    """

    def __init__(self, name, year, artist=None):
        self.name = name
        self.year = year
        if artist is None:
            self.artist = Artist("Various Artists")
        else:
            self.artist = artist

            self.tracks = []

    def add_song(self, song, position=None):
        """addds a song to the track list

        Args:
            song (Song): a song to add.
            position (optional)(int): If specified, the song will be added to that position
                in the track list - inserting it between other songs if necessary.
                otherwise, the song will be added to the end of the list
        """

        if position is None:
            self.tracks.append(song)
        else:
            self.tracks.insert(position, song)

class Artist:
    """Basic class to store artist details.

    Attributes:
        name(str): The name of the artist.
        albums (List(album)): A list of the albums by the artist.
            The list includes only those albums in this collection, it is
            not an exhaustive list of the artist's published albums.

        Methods:
            add_album: use to add a new album to the artist's album list
        """

    def __init__(self, name):
        self.name = name
        self.albums = []

    def add_album(self, album):
        """Add a new album to the list

        Args:
            album (Album): Album object to add to the list.
                If the album is already present, it will not be added again (although this is yet to implement)
                """
        self.album.append(album)

def load_data():
    new_artist = None
    new_album = None
    artist_list = []

    with open("albums.txt", "r") as albums:
        for line in albums:
            # data row should consist of (artist, album, year, song)
            artist_field, album_field, year_field, song_field = tuple(line.strip('\n').split('\t'))
            year_field = int(year_field)
            print(artist_field, album_field, year_field, song_field)

if __name__ == '__main__':
    load_data()
